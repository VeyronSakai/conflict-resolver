name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v5
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        run: npm run ci-test

  test-action:
    name: GitHub Actions Test
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create test branches and conflicts
        id: create-conflicts
        run: |
          # Save current branch (not used, kept for reference)
          # ORIGINAL_BRANCH=$(git branch --show-current)

          # Define test file paths
          TEST_DIR="__tests__/test-conflict-files"
          TEST_JSON="$TEST_DIR/test.json"
          TEST_MD="$TEST_DIR/test.md"
          TEST_CONFIG_YML="$TEST_DIR/test.config.yml"
          TEST_TXT="$TEST_DIR/undefined-rule.txt"
          TEST_PNG="$TEST_DIR/test.png"

          # Create base branch with test files
          git checkout -b test-base-${{ github.run_id }}

          # The test files are already in the repository
          git add "$TEST_DIR/"
          git commit -m "Add base test files" || echo "Files already committed"

          # Create incoming changes branch
          git checkout -b test-incoming-${{ github.run_id }}

          # Copy incoming changes files
          cp "$TEST_DIR/incoming-changes/"* "$TEST_DIR/"

          git add "$TEST_DIR/"
          git commit -m "Incoming changes"

          # Create current branch with base version changes
          git checkout test-base-${{ github.run_id }}
          git checkout -b test-current-${{ github.run_id }}

          # Copy base version files
          cp "$TEST_DIR/base-version/"* "$TEST_DIR/"

          git add "$TEST_DIR/"
          git commit -m "Base version changes"

          # Attempt to merge incoming changes into current branch to create conflicts
          echo "::notice::Attempting to merge incoming changes into current branch..."
          git merge test-incoming-${{ github.run_id }} --no-ff --no-commit || true

          # Check conflict status
          echo "::group::Git status after merge attempt"
          git status
          echo "::endgroup::"

          echo "::group::Conflicted files"
          git status --porcelain | grep "^UU" || echo "No conflicts found"
          echo "::endgroup::"

          # Save conflict state
          if git status --porcelain | grep -q "^UU"; then
            echo "has_conflicts=true" >> "$GITHUB_OUTPUT"
            echo "::notice::Conflicts detected. Ready to test conflict resolver."
          else
            echo "has_conflicts=false" >> "$GITHUB_OUTPUT"
            echo "::warning::No conflicts detected."
          fi

      - name: Show conflict details
        if: steps.create-conflicts.outputs.has_conflicts == 'true'
        run: |
          echo "::group::List of conflicted files"
          git diff --name-only --diff-filter=U
          echo "::endgroup::"

          for file in "$TEST_DIR"/*.{json,md,ts,yml,txt,xml}; do
            if [ -f "$file" ] && \
               git diff --check "$file" 2>/dev/null | grep -q "conflict"; then
              echo "::group::Conflict in $file"
              cat "$file" | head -50
              echo "::endgroup::"
            fi
          done

      - name: Test Local Action
        id: test-action
        uses: ./
        with:
          config-path: "__tests__/conflict-resolver-test.yml"

      - name: Print Output
        id: output
        env:
          RESOLVED_FILES: ${{ steps.test-action.outputs.resolved-files }}
          UNRESOLVED_FILES: ${{ steps.test-action.outputs.unresolved-files }}
        run: |
          echo "::notice::Resolved files: $RESOLVED_FILES"
          echo "::notice::Unresolved files: $UNRESOLVED_FILES"

          # Define test file paths for verification
          TEST_DIR="__tests__/test-conflict-files"
          TEST_JSON="$TEST_DIR/test.json"
          TEST_MD="$TEST_DIR/test.md"
          TEST_CONFIG_YML="$TEST_DIR/test.config.yml"
          TEST_TXT="$TEST_DIR/undefined-rule.txt"
          TEST_PNG="$TEST_DIR/test.png"
          TEST_PDF="$TEST_DIR/test.pdf"
          TEST_ZIP="$TEST_DIR/test.zip"

          # Verify expected outcomes
          echo "::group::Verification Results"

          # Check resolved files
          if echo "$RESOLVED_FILES" | grep -q "$TEST_JSON"; then
            echo "✅ test.json resolved (theirs strategy)"
          else
            echo "❌ test.json should have been resolved"
          fi

          if echo "$RESOLVED_FILES" | grep -q "$TEST_MD"; then
            echo "✅ test.md resolved (ours strategy)"
          else
            echo "❌ test.md should have been resolved"
          fi

          # Check binary files
          if echo "$RESOLVED_FILES" | grep -q "$TEST_PNG"; then
            echo "✅ test.png resolved (theirs strategy)"
          else
            echo "❌ test.png should have been resolved"
          fi

          # Check unresolved files (manual strategy)
          if echo "$UNRESOLVED_FILES" | grep -q "$TEST_CONFIG_YML"; then
            echo "✅ test.config.yml unresolved (manual strategy)"
          else
            echo "❌ test.config.yml should remain unresolved"
          fi

          # Check files without rules
          if echo "$UNRESOLVED_FILES" | grep -q "$TEST_TXT"; then
            echo "✅ undefined-rule.txt unresolved (no rule defined)"
          else
            echo "❌ undefined-rule.txt should remain unresolved"
          fi

          echo "::endgroup::"

      - name: Verify resolved file contents
        run: |
          set -x  # Enable debug output
          # Define test file paths
          TEST_DIR="__tests__/test-conflict-files"
          TEST_JSON="$TEST_DIR/test.json"
          TEST_MD="$TEST_DIR/test.md"
          TEST_PNG="$TEST_DIR/test.png"

          echo "::group::Content verification for resolved files"

          # First, check if files exist
          echo "Checking if resolved files exist:"
          ls -la "$TEST_DIR/"

          # Verify test.json has incoming changes content (theirs strategy)
          if grep -q '"version": "1.1.0"' "$TEST_JSON" && \
             grep -q '"name": "incoming-test"' "$TEST_JSON" && \
             grep -q '"customField": "incoming-value"' "$TEST_JSON"; then
            echo "✅ test.json has correct incoming changes content (theirs)"
          else
            echo "❌ test.json does not have expected incoming changes content"
            echo "Actual content:"
            cat "$TEST_JSON"
            exit 1
          fi

          # Verify test.md has base version content (ours strategy)
          if grep -q "# Base Version Documentation" "$TEST_MD" && \
             grep -q "Base version has its own content for section 1" "$TEST_MD" && \
             grep -q "## Section 4" "$TEST_MD"; then
            echo "✅ test.md has correct base version content (ours)"
          else
            echo "❌ test.md does not have expected base version content"
            echo "Actual content:"
            cat "$TEST_MD"
            exit 1
          fi

          # Verify PNG file has incoming changes content (theirs strategy - 2x2 pixels)
          PNG_SIZE=$(stat -c%s "$TEST_PNG" 2>/dev/null || stat -f%z "$TEST_PNG" 2>/dev/null || wc -c < "$TEST_PNG")
          # Remove any whitespace from the size
          PNG_SIZE=$(echo "$PNG_SIZE" | tr -d ' ')
          echo "PNG file size: $PNG_SIZE bytes"
          if [ "$PNG_SIZE" -eq 57 ]; then
            echo "✅ test.png has correct incoming changes content (2x2 pixels, 57 bytes)"
          elif [ "$PNG_SIZE" -eq 61 ]; then
            echo "❌ test.png has base version content (3x3 pixels, 61 bytes) instead of incoming changes"
            exit 1
          else
            echo "❌ test.png size: $PNG_SIZE bytes (expected 57 for incoming changes)"
            ls -la "$TEST_PNG"
            exit 1
          fi

          echo "::endgroup::"

      - name: Verify unresolved file contents
        run: |
          set -x  # Enable debug output
          # Define test file paths
          TEST_DIR="__tests__/test-conflict-files"
          TEST_CONFIG_YML="$TEST_DIR/test.config.yml"
          TEST_TXT="$TEST_DIR/undefined-rule.txt"

          echo "::group::Content verification for unresolved files"

          # Check that unresolved files still have conflict markers
          for file in "$TEST_CONFIG_YML" "$TEST_TXT"; do
            if [ -f "$file" ]; then
              FILE_NAME=$(basename "$file")
              if grep -q "<<<<<<< HEAD" "$file" && \
                 grep -q "=======" "$file" && \
                 grep -q ">>>>>>>" "$file"; then
                echo "✅ $FILE_NAME correctly contains conflict markers"
              else
                echo "❌ $FILE_NAME should contain conflict markers but doesn't"
                echo "Actual content:"
                head -20 "$file"
                exit 1
              fi
            fi
          done

          # Verify specific content in conflict markers
          if grep -q "name: base-app" "$TEST_CONFIG_YML" && \
             grep -q "name: incoming-app" "$TEST_CONFIG_YML"; then
            echo "✅ test.config.yml contains both versions' contents in conflict"
          else
            echo "❌ test.config.yml missing expected conflict content"
            exit 1
          fi

          echo "::endgroup::"

      - name: Show final file contents
        run: |
          # Define test file paths
          TEST_DIR="__tests__/test-conflict-files"
          TEST_JSON="$TEST_DIR/test.json"
          TEST_MD="$TEST_DIR/test.md"

          echo "::group::Final resolved file contents (samples)"

          echo "--- test.json (should have incoming changes content - theirs) ---"
          cat "$TEST_JSON" | head -10

          echo ""
          echo "--- test.md (should have base version content - ours) ---"
          cat "$TEST_MD" | head -10

          echo "::endgroup::"

          echo "::group::Unresolved files with conflict markers"

          for file in "$TEST_CONFIG_YML" \
                      "$TEST_TXT"; do
            if [ -f "$file" ]; then
              echo "--- $file ---"
              grep -E "^(<<<<<<<|=======|>>>>>>>)" "$file" || \
                echo "No conflict markers found (might be an error)"
              echo ""
            fi
          done

          echo "::endgroup::"
